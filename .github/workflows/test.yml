name: Test Suite

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm test
      
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npm run install-browsers
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 30

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to GitHub Pages (Preview)
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        destination_dir: preview/${{ github.event.number }}
        
    - name: Comment PR
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ Preview deployed: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/preview/${{ github.event.number }}/'
          })

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Check file sizes
      run: |
        echo "Checking file sizes..."
        find . -name "*.js" -o -name "*.css" -o -name "*.html" | while read file; do
          size=$(stat --format=%s "$file" 2>/dev/null || stat -f%z "$file")
          if [ $size -gt 500000 ]; then
            echo "‚ö†Ô∏è  Large file detected: $file ($size bytes)"
          fi
        done
        
    - name: Check for TODO comments
      run: |
        echo "Checking for TODO comments..."
        grep -r "TODO\|FIXME\|HACK" --include="*.js" --include="*.css" --include="*.html" . || echo "No TODO comments found"
        
    - name: Validate HTML
      run: |
        echo "Basic HTML validation..."
        if ! grep -q "<!DOCTYPE html>" index.html; then
          echo "‚ùå Missing DOCTYPE declaration"
          exit 1
        fi
        echo "‚úÖ HTML validation passed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        if [ -f package.json ]; then
          npx audit-ci --config audit-ci.json || echo "Security audit completed with warnings"
        fi
        
    - name: Check for sensitive data
      run: |
        echo "Checking for potential sensitive data..."
        if grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.json" --exclude-dir=node_modules . | grep -v "// " | grep -v "/\*"; then
          echo "‚ö†Ô∏è  Potential sensitive data found"
        else
          echo "‚úÖ No sensitive data patterns detected"
        fi